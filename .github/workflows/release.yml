name: Rust Multi-platform Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build_for_all:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: linux-musl
            file_name: probe-linux-musl
          - os: macos-latest
            target: ""
            suffix: macos
            file_name: probe-macos
          - os: windows-latest
            target: ""
            suffix: windows
            file_name: probe-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release (MUSL)
        if: matrix.target != ''
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build release (Native)
        if: matrix.target == ''
        run: cargo build --release

      - name: Archive build artifacts
        run: |
          mkdir -p build_artifacts
          # Linux and macOS
          if [ "${{ runner.os }}" != "Windows" ]; then
            # 这里的路径需要根据是否是 musl 编译来判断
            BINARY_PATH="target/release/probe"
            if [ "${{ matrix.target }}" != "" ]; then
              BINARY_PATH="target/${{ matrix.target }}/release/probe"
            fi
            mv "$BINARY_PATH" "build_artifacts/${{ matrix.file_name }}"
          else
            mv target/release/probe.exe "build_artifacts/${{ matrix.file_name }}.exe"
          fi
          
          # 打包为 zip，并包含 static 目录
          zip -r "build_artifacts/${{ matrix.file_name }}.zip" build_artifacts/${{ matrix.file_name }}* static/

      - name: Create a GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build_artifacts/*.zip
          body: |
            This is an automated release.
            Changes:
            - Add your release notes here
          tag_name: ${{ github.ref_name }}